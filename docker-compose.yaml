version: '3.7'

services:
  identity-db:
    image: postgres
    volumes:
      - ".data/keycloak/db:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      timeout: 45s
      interval: 10s
      retries: 10
    secrets:
      - dbpassword
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD_FILE: /run/secrets/dbpassword
  identity-service:
    hostname: keycloak
    image: quay.io/keycloak/keycloak:16.0.0
    ports:
      - "8080:8080"
    networks:
      - default
    depends_on:
      - identity-db
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: identity-db
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD_FILE: /run/secrets/dbpassword
      DB_SCHEMA: public
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD_FILE: /run/secrets/adminpassword
    secrets:
      - dbpassword
      - adminpassword
  discovery-server:
    image: discovery-server
    build:
      context: ./discovery-server/
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - default
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8761"]
        interval: 30s
        timeout: 10s
        retries: 5
  config-server:
    image: config-server
    build:
      context: ./config-server/
      dockerfile: Dockerfile
    depends_on:
      - discovery-server
    ports:
      - "8888:8888"
    environment:
      - discoveryhost=discovery-server
      - discoveryport=8761
    networks:
      - default
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8888/config-server/dev"]
        interval: 30s
        timeout: 10s
        retries: 5
  catalog-service:
    image: catalog-service
    build:
      context: ./catalog-service/
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - discoveryhost=discovery-server
      - discoveryport=8761
      - dbhost=catalog-database
      - dbport=3306
      - keystore=/keystore
      - identityhost=keycloak
      - identityport=8080
    volumes:
      - ".data/certificates:/keystore"
    networks:
      - default
    depends_on:
      - config-server
      - catalog-database
    secrets:
      - catalogdbrootpassword
      - sslkeystorepassword

  catalog-database:
    image: mysql:latest
    ports:
      - "3306:3306"
    volumes:
      - "./.data/catalogdb:/var/lib/mysql"
      - "./.data/catalog-service/src/main/resources:/var/tmp/sqlscripts"
    healthcheck:
        test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
        interval: 30s
        timeout: 20s
        retries: 5
    secrets:
      - catalogdbrootpassword
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/catalogdbrootpassword
      MYSQL_DATABASE: catalogdb
    networks:
      - default
  order-service:
    image: order-service
    build:
      context: ./order-service/
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - discoveryhost=discovery-server
      - discoveryport=8761
      - dbhost=order-database
      - dbport=3306
      - keystore=/keystore
      - identityhost=keycloak
      - identityport=8080
    volumes:
      - ".data/certificates:/keystore"
    networks:
      - default
    depends_on:
      - config-server
      - order-database
    secrets:
      - orderdbrootpassword
      - sslkeystorepassword

  order-database:
    image: mysql:latest
    ports:
      - "3307:3306"
    volumes:
      - "./.data/orderdb:/var/lib/mysql"
      - "./.data/order-service/src/main/resources:/var/tmp/sqlscripts"
    healthcheck:
        test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
        interval: 30s
        timeout: 20s
        retries: 5
    secrets:
      - orderdbrootpassword
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/orderdbrootpassword
      MYSQL_DATABASE: orderdb
    networks:
      - default
  messaging-service:
    image: rabbitmq:3-management
    ports:
      - 5673:5672
      - 15673:15672
    volumes:
      - "./.data/messagebus/data:/var/lib/rabbitmq/"
      - "./.data/messagebus/log/:/var/log/rabbitmq"
  
networks:
  default:
    driver: overlay

secrets:
  dbpassword:
    external: true
  adminpassword:
    external: true
  catalogdbrootpassword:
    external: true
  orderdbrootpassword:
    external: true
  sslkeystorepassword:
    external: true